import unittest
from tempfile import NamedTemporaryFile

from delphin.codecs import mrsprolog

from mrs_logic import parse
from mrs_logic.utool import UTool, UToolError


class TestUTool(unittest.TestCase):

    _mrs = next(parse('The sky is blue.'))
    _mrs_prolog_enc = mrsprolog.encode(_mrs)

    def test__init__(self):
        # failure: no such decoder
        self.assertRaises(
            UToolError, UTool, TestUTool._mrs_prolog_enc,
            decoder='-unknown-')

        # success: default decoder
        utool = UTool(TestUTool._mrs_prolog_enc)
        self.assertIsNotNone(utool)

    def test_solve(self):
        utool = UTool(TestUTool._mrs_prolog_enc)
        self.assertTrue(utool.solve())

    def test_is_solvable(self):
        utool = UTool(TestUTool._mrs_prolog_enc)
        self.assertTrue(utool.is_solvable())

    def test_count_solved_forms(self):
        utool = UTool(TestUTool._mrs_prolog_enc)
        self.assertEqual(utool.count_solved_forms(), 1)

    def test_iterate_solved_forms(self):
        utool = UTool(TestUTool._mrs_prolog_enc)
        it = utool.iterate_solved_forms()
        self.assertEqual(next(it), ({'h5': 'h7', 'h6': 'h1'}, {}))
        self.assertRaises(StopIteration, next, it)

    def test_serialize(self):
        # failure: unknown encoder
        utool = UTool(TestUTool._mrs_prolog_enc)
        self.assertRaises(UToolError, utool.serialize, encoder='-unknown-')

        # success: default encoder
        utool = UTool(TestUTool._mrs_prolog_enc)
        ret = utool.serialize()
        self.assertEqual(ret, '''\
%%  autogenerated by Utool 3.4 (see github.com/coli-saar/utool/ for details)
[plug(h5 h7) plug(h6 h1)]
''')
        # success: encoder=term-prolog
        ret = utool.serialize(encoder='term-prolog')
        self.assertEqual(ret, "'_the_q'('_sky_n_1','_blue_a_1')")

        # success: index=2
        mrs = next(parse('every cat loves some dog'))
        mrs_prolog_enc = mrsprolog.encode(mrs)
        utool = UTool(mrs_prolog_enc)
        self.assertEqual(utool.count_solved_forms(), 2)

        ret = utool.serialize(encoder='term-prolog', index=2)
        self.assertEqual(
            ret,
            "'_every_q'('_cat_n_1','_some_q_indiv'('_dog_n_1','_love_v_1'))")

        # success: serialize to file
        with NamedTemporaryFile(prefix=__name__, suffix='.log', mode='w',
                                delete=True) as temp:
            self.assertIsNone(utool.serialize(temp.name))
            with open(temp.name) as fp:
                self.assertEqual(fp.read(), '''\
%%  autogenerated by Utool 3.4 (see github.com/coli-saar/utool/ for details)
[[plug(h10 h12) plug(h11 h4) plug(h5 h7) plug(h6 h1)]
[plug(h5 h7) plug(h6 h9) plug(h10 h12) plug(h11 h1)]
]''')


if __name__ == '__main__':
    unittest.main()
